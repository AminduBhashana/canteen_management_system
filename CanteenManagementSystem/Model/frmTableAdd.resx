<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
<<<<<<< HEAD
=======
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA1mSURBVHhe7d1x5N31Hsfx+ZmZmZlkMpNJkpmZJDNzJZnk
        miSZJP2RzGRmJkkik+S6kv1xJZkrmeS67h/XJOmP60qSZK7MJEmSSZLJJN3X6/f5HPc3fvf0Pb/P+3zO
        7/P5Ph+8qO37+3zPzufzfZ1zfuf7PWcDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAYs99++22bcotyh3K3co9yJOch5bGcx5WnlBO/k9PK8wvOSWW121Yjk/trPeSoMpnLWXKv
        4rWwWg4p+1fJbcrunBuVrXmJYb3R5PigP6N8pQDz9JPyrfKJ8rpye16GWARPgPKRAizCFeVIXo6oSXf8
        YeUbzwKwQFeV48rGvDQxT76jlScUPx0D1oNflJeVLXmZYh50B29WXsx3OLDevKlsz8sVkXTH+pd9f/W9
        DKxj7yo35WWLCLpDdynv+d4FGvCxcmteviihO3KP8qnvVaAhl5Q78zLGWugO/IPC+/tolc8ZuDcvZwyl
        O21JeVD5XgFa5jXss1CX8vLGNLqj/Daf31f1+6tAD7yWjymcKzCN7iC/zefz33mbD725pjynbM7LHSvp
        jtmqnFV+VYAeeW2/qnBx0Uq6Q25Q3lKAMfBavyEv/3HTHbFT4T1+jM0/lXGfMKQ7wNdd+6QJYIz+rezO
        h8O46B9+l+KTJYAx+0zZmw+L/ukf6/f471O4lBdIvlAO5EOkX/pH+uB/WOEEH+B6PmvQD4x9njCkf9gm
        5UmFE3yA1fmB0Z992FcJ6B/kE3z8AZs+GQLA/+cHSD9QbsqHT9v0D9mivKRwdh8wjB8on1baPmtQ/wB/
        iMdfFACz8QOmHzjb/Jgx3XB/nvp5BcDa+QF0Wz6s2qAb7LP7LvjWAyjmB9I2Th3WDfU38/gMJwBx/IC6
        Mx9m65NuoD++y2c2AYj3oXJLPtzWF90wn9p72bcSwNxcVPblw2590A3yl3B+7VsHYO6+VA7lw29xdCN8
        aq+/gdXfkQagnu+U+5XFnDXoHSuPKD8qAOr7QfExWLcEtEN/cCfn9QOLNzl1uM4HjmpHvqjnlMJ5/cD6
        4GPR19rM9/oB7YBP7QXWJx+TZ5T5XD+ggX1Rz58UPrUXWJ8mnzoce/2ABvRHdnNRD9CGc0rM9QMeSPH3
        ngNoR/n1Ax5AedujAWjO35Ud+XCejX5wex4AQLv8nRuzff+AfmCH4i8uANA+X5077EpCbeiDn2/qAfri
        EtiVD/PVaQMf/O97awDd8eXEqz8T0F/4NT+P/EDfPlCuf3dAf+D3+fmFHzAOflv/f9cO6H98bj+AcfAZ
        gw9NDn5f1ssn+QDj8tGkAPwV3QDGxRcP7XAB+AsJAYzPQReAP1EEwPg86AI4nv4bwMg84QI4kf4bwMic
        oACA8XrWBcA5AMA4Pe8C8Gf8ARgfCgAYMQoAGDEKABgxCgAYMQoAGDEKABgxCgAYMQoAGDEKABgxCgAY
        MQoAGDEKABgxCgAYMQoAGDEKABix5QJ4Lv03gJFZLoA7FX9GOIBxuXvy5SB/S/8PYCT8LeBLkwLYp1z1
        nwLo3jXlwPLBP6E/eGb5rwD07mUlPfpP6A82KW/7bwF064KyJR/21/NfKK8p/vpgAH05r2zLh/vqtIGf
        CTygfKYAaN8l5VFl9Uf+1Wjjbcph5azysbKIXxL6mciPhDScRTyb9rHqB/DXlSPK9nxYz04/vKRsVVwE
        tV1WdhDScD5RavOx6gfw63/RV0KD+TeHtX2edw80SWv4w7SUq3o57z6OB01jV0UBoGlawxRAAQoATdMa
        pgAKUABomtYwBVCAAkDTtIYpgAIUAJqmNUwBFKAA0DStYQqgAAWApmkNUwAFBhWAttusHFQeVp5UTipP
        K2fWmJvz0OiE53TF/L6gnFZOrZITyhMr8pjidTWJz6zzGbK789BTaTsKoMDQAvClzL7G2Z9sFHHq5cE8
        NDrhOU1TO4jX0Mp4Xa2M19qJPPRU2o4CKDC0AKJvGwXQGc9pmtowJ/PQU2k7CqDA0AJ4JW0ehgLojOc0
        TW0YCqACCgAhPKdpasNQABVQAAjhOU1TG4YCqIACQAjPaZraMBRABRQAQnhO09SGoQAqoAAQwnOapjYM
        BVDB0AI4lzYPQwF0xnOapjYMBVABBYAQntM0tWEogAooAITwnKapDUMBVEABIITnNE1tGAqgAgoAITyn
        aWrDUAAVUAAI4TlNUxuGAqiAAkAIz2ma2jAUQAUUAEJ4TtPUhqEAKqAAEMJzmqY2DAVQAQWAEJ7TNLVh
        KIAKKACE8JymqQ1DAVRAASCE5zRNbRgKoAIKACE8p2lqw1AAFQwtAK4GxFSe0zS1YSiACigAhPCcpqkN
        QwFUQAEghOc0TW0YCqACCgAhPKdpasNQABVQAAjhOU1TG4YCqOBi3v1U2o4CwFSe0zS1YYYWwL/S5lV1
        UwAf5t1Ppe0oAEzlOU1TG2ZoAVxIm1dFARSiADrjOU1TG4YCqIACQAjPaZraMBRABUML4MW0eRgKoDOa
        0zuVn5dnNwYFUMHQAvD3vUeiADqjOb1Dubo8uzEogAooAITQnFIAJTxoGrsqCgAhNKcUQAkPmsauigJA
        CM0pBVDCg6axq6IAEEJzSgGU8KBp7KooAITQnFIAJTxoGruqRRTANeWuPDQ6oTndp/zoCQ5CAVSwiALw
        o8QdeWh0QnO6V/neExyEAqiAAkAIzSkFUMKDprGrGloAp9PmISiADmlOKYASHjSNXdXQAjiZNg9BAXRI
        c3q78p0nOAgFUAEFgBCa01uVbzzBQSiACoYWwFNp8xD+TfG+PDQ6oTmlAEp40DR2VUML4PG0eQi/Ttyb
        h0YnNKcugK89wUGO56Gn0nYUQIFFFIBfJ96eh0YnNKc3K194goM8noeeSttRAAWGFsDRtHkIP028NQ+N
        TmhOdykUwFp50DR2VUML4EjaPMSXyu48NDqhOb1J+dwTHOSxPPRU2o4CKDC0AO5Om4e4rOzKQ6MTmtMb
        lYue4CAP5KGn0nYUQIGhBeCPe/p1+SfKeZHcmIdGJzSn25SPPcFB7slDT6XtKIACQwvAJ3lEXejhL3LY
        kodGJzSnG5UPPMEBfMHY/jz0VNqOAigwtAB2KP9Z/oly5/Kw6Izm9tU0xcX8y8RBLxO1HQVQYGgBLCkR
        Hw3uswAHPbVDezS3B5SIZ4pvKBvzsFNpOwqgwKACMG17m+Lf4Jd4W+Hpf6c0t5sVH7wlvlUGPf03bUsB
        FJilAPws4Jiy1s9+v6RwAlDnNMe7lc884Wvg1/6+8nQpD/e7tC0FUGBwAZi2d8P7ds5aAn7mcDgPg85p
        rg8ps54T4IP/rDLTM0RtTwEUeC/vfjD9jEvAzwSGvBzwW4efKIfyj2MkNOf+jEC/4zPk7WNfQ3BKmfnl
        oX7mHQ9QWTcFcCHvfmb6Wf9OwLfZB/hXyg/KT8oVxeXwnuJJ3Zl/BCOjufe7R76S9F3Fv9n32vAa8Vrx
        Qf+p4l8u71EGP+1fST93XqmNApjQGD4B5BbFHwrpE4b8yTB+Hbgpb4KR01rwOQK+WMhrw2tkv+I1sz1v
        smYagwIoUFwAwCJpDVMABSgANE1rmAIoQAGgaVrDFEABCgBN0xqmAApQAGia1jAFUIACQNO0himAAhQA
        mqY1TAEUoADQNK1hCqAABYCmaQ1TAAUoADRNa7ibAngpjV0VBYCmaQ13UwDPprGrogDQNK3hbgrgmTR2
        VRQAmqY1TAEUoADQNK1hCqAABYCmaQ1TAAUoADRNa5gCKEABoGlawxRAAQoATdMapgAKUABomtYwBVDg
        nbx7oElaw6+npVxVNwVwPu8eaJLW8GtpKVdFAQDrgdYwBVCAAkDTtIYpgAIUAJqmNUwBFKAA0DSt4UUU
        wIt593E0KAUAzEhreBEF8GzefRwN+nQauyoKAE3TGl5EATyTdx9Hgx5PY1dFAaBpWsPdFIC/crs2CgBN
        0xqmAApQAGia1jAFUIACQNO0himAAhQAmqY13E0BPJrGrooCQNO0hrspgKNp7KooADRNa3gRBXAq7z6O
        BqUAgBlpDS+iAI7l3cfRoBQAMCOt4W4K4I9p7KooADRNa3gRBfBI3n0cDXp/GrsqCgBN0xpeRAEczbuP
        o0EPpbGrogDQNK3hRRTA/Xn3cTTonjR2VRQAmqY1vIgCOJh3H0eD7khjV0UBoGlaw4sogD1593E06Gbl
        ++Xh6/hVOZ13DzRJa/hJ5Rcv6EquKdvy7uNo0I3KP7yHSi4qN+TdA03SGt6qfOQFXcn7ysa8+1ga+IBS
        o81+Vh7OuwWaprV8n3LVC3vO/Kz5cN5tPA2+pJz1nubI/4g3lKW8W6B5Ws+v5LU9T28q83n0n9AOtigf
        eG9z4DvILzPiX8MAC6Q17d+hnctrfB78MmN73t18aUd+XeOvPIp8OfCD4g8e3ZR3A3RFa9u/RzuhXFGi
        uFDeUuo/aGqne5U/K58ra222r5QXlJ15WKBrWut+S90Pdl8qa+Fj7bLil+P787AAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCCDRv+C41n6i2Wxv9DAAAAAElFTkSuQmCC
</value>
  </data>
>>>>>>> main
</root>