<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="guna2PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>